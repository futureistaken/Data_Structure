
let ZERO  = \f x -> x
let ONE   = \f x -> f x
let TWO   = \f x -> f (f x)
let THREE = \f x -> f (f (f x))
let FOUR  = \f x -> f (f (f (f x)))

let SUC   = \n f x -> f (n f x)
let ADD   = \n m -> n SUC m
let MUL   = \n m -> n (ADD m) ZERO


-------------------------------------------------------------------------------
-- YOU SHOULD ONLY MODIFY THE TEXT BELOW, JUST THE PARTS MARKED AS COMMENTS
-------------------------------------------------------------------------------
eval suc_one :
  SUC ONE
  -- (a) fill in your reductions here
  =d>(\n f x -> f (n f x)) ONE
  =b>(\f x -> f (ONE f x))
  =d>(\f x -> f ((\f x -> f x) f x))
  =b>(\f x -> f ((\x -> f x) x))
  =b>(\f x -> f ((f x)))
  =d> TWO

eval add_one_zero :
  ADD ONE ZERO
  -- (b) fill in your reductions here
  =d>(\n m -> n SUC m) ONE ZERO
  =b>(\m -> ONE SUC m)  ZERO
  =b>ONE SUC ZERO
  =d>(\f x -> f x) SUC ZERO
  =b>(\x -> SUC x) ZERO
  =b>SUC ZERO 
  =d>(\n f x -> f (n f x)) ZERO
  =a>(\a b c -> b (a b c)) ZERO
  =b>(\b c -> b (ZERO b c))
  =d>(\b c -> b ((\f x -> x) b c))
  =b>(\b c -> b ((\x -> x) c))
  =b>(\b c -> b c)
  =a>(\f x -> f x)
  =d>ONE
  

eval add_one_two :
  ADD ONE TWO 
  -- (c) fill in your reductions here
  --one (\f x -> f x) two (\f x -> f (f x))
  =d>(\n m -> n SUC m) ONE TWO
  =a>(\a b -> a SUC b) ONE TWO
  =b>(\b -> ONE SUC b) TWO
  =b>ONE SUC TWO
  =d>(\f x -> f x) SUC TWO
  =b>(\x -> SUC x) TWO
  =b>SUC TWO
  =d>(\n f x -> f (n f x)) TWO
  =a>(\a b c -> b (a b c)) TWO
  =b>(\b c -> b (TWO b c))
  =d>(\b c -> b ((\f x -> f (f x)) b c))
  =b>(\b c -> b ((\x -> b (b x))  c))
  =b>(\b c -> b (b (b c)))
  =a>(\f x -> f (f (f x)))
  =d> THREE